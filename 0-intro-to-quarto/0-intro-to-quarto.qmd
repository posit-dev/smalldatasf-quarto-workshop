---
title: "Intro to Quarto"
subtitle: "Small Data SF"
author:   
  - name: Sara Altman
    affiliations:
      - name: Posit, PBC
  - name: Isabella Velásquez
    affiliations:
      - name: Posit, PBC
footer: "[pos.it/smalldatasf-quarto-workshop](https://pos.it/smalldatasf-quarto-workshop)"
logo: "../images/slides-logo.png"
format:
  revealjs:
    theme: ../style/slides.scss
    transition: fade
    slide-number: true
    chalkboard: true
---

```{r}
#| include: false

library(countdown)
```

# Welcome

## About us

::: columns
::: {.column width="50%"}
-   Data Science Educator

    Developer Relations, Posit
:::

::: {.column width="50%" style="text-align: center;"}
![](images/sara.jpg){fig-alt="Sara's headshot" fig-align="center" width=250px style="border-radius: 50%;"}

**Sara Altman**

:::
:::

## About us

::: columns
::: {.column width="50%"}
-   Sr. Product Marketing Manager

    Developer Relations, Posit
:::

::: {.column width="50%" style="text-align: center;"}
![](images/isabella.jpg){fig-alt="Isabella's headshot" fig-align="center" width=250px style="border-radius: 50%;"}

**Isabella Velásquez**

[{{< fa brands github >}} \@ivelasq](https://github.com/ivelasq)

[{{< fa link >}} ivelasq.rbind.io](https://ivelasq.rbind.io)

:::
:::

## About you

::: task
Please share

-   Name
-   Professional affiliation
-   What do you use computational notebooks for?
-   What do you hope to get out of this tutorial?
:::

```{r}
#| echo: false

countdown(minutes = 4)
```

## Meeting you where you are

::: columns
::: {.column width="50%"}
::: {.fragment .fade-in-then-semi-out}
These materials are pitched at someone who:

-   knows some Python + Markdown

-   has worked in VS Code

-   wants to learn about Quarto
:::
:::

::: {.column width="50%"}
::: {.fragment .fade-in}
We'll teach you

- What is Quarto

- How to create documents with Quarto

- How to create a dashboard from a notebook
:::
:::
:::

## Workshop structure

::: columns
::: {.column .fragment width="33%"}
**My turn**

-   Lecture segments
-   Feel free to just watch, take notes, browse docs, or tinker around with the code
:::

::: {.column .fragment width="33%"}
::: demo
**Our turn**

-   Lecture segments + live coding
-   Follow along with live coding
:::
:::

::: {.column .fragment width="33%"}
::: task
**Your turn**

-   Practice exercises for you
-   Work on your own or with the person next to you
:::
:::
:::

## Getting help

-   During **my turn** and **your turn** segments -- raise your hand

-   During **our turn** segments -- also feel free to raise your hand for questions but if your question seems specific to your setup, we might come around and help during the next your turn break

## A tour of Quarto

::: {.hand-blue-large style="text-align: center;"}
Sit back and enjoy!
:::

::: demo
-   Understanding the relationship between Quarto and the Jupyter engine
-   Using Quarto in VS Code
-   Creating Quarto documents (metadata, markdown text, and code)
-   Working with Quarto projects
:::

# What is Quarto?

## Quarto ...

is an innovative, open-source scientific and technical publishing system compatible with Jupyter Notebooks and other popular media.

![](images/demo-quarto.png){width=75% fig-align="center"}

## With Quarto ...

you can **weave** together **narrative** and **code** to produce elegantly formatted output such as documents, web pages, blog posts, books, dashboards, and more, with...

::: incremental
-   **consistent** implementation of attractive and handy features across outputs: tabsets, code-folding, syntax highlighting, etc.
-   defaults that meet accessibility guidelines as well as features that enable good practices for producing **accessible** documents
-   natively **multi-lingual**, supporting for multiple languages like Python, Julia, Observable, and more via the Jupyter engine for executable code chunks
:::

## A pause

::: task
Where does the name "Quarto" come from?
:::

[Quarto on Wikipedia](https://en.wikipedia.org/wiki/Quarto){preview-link="true"}


::: aside
Source: <https://en.wikipedia.org/wiki/Quarto>
:::

# Quarto formats

## One install, "Batteries included" {.smaller}

-   Quarto comes **"batteries included"** straight out of the box:

    -   HTML reports and websites

    -   PDF reports

    -   MS Office (Word, Powerpoint)

    -   Presentations (Powerpoint, Beamer, `revealjs`)

    -   Books

    -   Dashboards

    -   ...

. . .

-   Any language, *exact* same approach and syntax

## Many Quarto formats {.smaller}

| Feature          | Quarto                                                                                                                                                                                      |
|------------------|------------------------------------------------------|
| Basic Formats    | [html](https://quarto.org/docs/output-formats/html-basics.html), [pdf](https://quarto.org/docs/output-formats/pdf-basics.html), [docx](https://quarto.org/docs/output-formats/ms-word.html) |
| Beamer           | [beamer](https://quarto.org/docs/presentations/beamer.html)                                                                                                                                 |
| PowerPoint       | [pptx](https://quarto.org/docs/presentations/powerpoint.html)                                                                                                                               |
| HTML Slides      | [revealjs](https://quarto.org/docs/presentations/revealjs/)                                                                                                                                 |
| Advanced Layout  | [Quarto Article Layout](https://quarto.org/docs/authoring/article-layout.html)                                                                                                              |
| Cross References | [Quarto Crossrefs](https://quarto.org/docs/authoring/cross-references.html)                                                                                                                 |
| Websites & Blogs | [Quarto Websites](https://quarto.org/docs/websites/), [Quarto Blogs](https://quarto.org/docs/websites/website-blog.html)                                                                    |
| Books            | [Quarto Books](https://quarto.org/docs/books/)                                                                                                                                              |
| Interactivity    | [Quarto Interactive Documents](https://quarto.org/docs/interactive/shiny/)                                                                                                                  |
| Journal Articles | [Journal Articles](https://quarto.org/docs/journals/index.html)                                                                                                                             |
| Dashboards       | [Dashboards](https://quarto.org/docs/dashboards/)                                                                                                                                                           |

: {tbl-colwidths="\[25,75\]"}

# How it works

## Revisit: What is Quarto? {.smaller}

Quarto is a command line interface (**CLI**) that renders plain text formats (`.qmd`, `.rmd`, `.md`) OR mixed formats (`.ipynb`/Jupyter notebook) into static PDF/Word/HTML reports, books, websites, presentations and more.

. . .

```{bash}
#| eval: false
#| echo: true
#| code-line-numbers: "|1|2|10|15|16"

  Usage:   quarto 
  Version: 1.5.57

  Description:

    Quarto CLI

  Options:

    -h, --help     - Show this help.                            
    -V, --version  - Show the version number for this program.  

  Commands:

    render          [input] [args...]     - Render files or projects to various document types.
    preview         [file] [args...]      - Render and preview a document or website project.  
    serve           [input]               - Serve a Shiny interactive document.                
    create          [type] [commands...]  - Create a Quarto project or extension               
    create-project  [dir]                 - Create a project for rendering multiple documents  
    convert         <input>               - Convert documents to alternate representations.    
    pandoc          [args...]             - Run the version of Pandoc embedded within Quarto.  
    typst           [args...]             - Run the version of Typst embedded within Quarto.   
    run             [script] [args...]    - Run a TypeScript, R, Python, or Lua script.        
    add             <extension>           - Add an extension to this folder or project         
    install         [target...]           - Installs an extension or global dependency.        
    publish         [provider] [path]     - Publish a document or project to a provider.       
    check           [target]              - Verify correct functioning of Quarto installation. 
    help            [command]             - Show this help or the help of a sub-command.
```

## Under the hood

![](images/ipynb-how-it-works.png){fig-align="center"}

::: incremental
-   `jupyter` evaluates Python code and returns a `.md` file along with the evaluated code
-   Quarto applies Lua filters + CSS/LaTeX which is then evaluated alongside the `.md` file by Pandoc and converted to a final output format
:::

## Under the hood

with a wider lens...

![](images/quarto-how-it-works.png){fig-align="center"}

::: incremental
-   `jupyter` or `knitr` evaluates Python, Julia, R, or Observable code and returns a `.md` file along with the evaluated code
-   Quarto applies Lua filters + CSS/LaTeX which is then evaluated alongside the `.md` file by Pandoc and converted to a final output format
:::

## Converting notebooks

You can convert between `.ipynb` and `.qmd` representations of a notebook using the `quarto convert` 
command. 

For example:

```{.bash filename="Terminal"}
quarto convert my-document.ipynb # converts to qmd
quarto convert my-document.qmd   # converts to ipynb
```

# Quarto and VS Code

## From the comfort of your own ~~home~~workspace

::: r-stack
![](https://quarto.org/docs/tools/images/rstudio-preview.png){.fragment fig-alt="A screenshot of a Quarto document rendered inside RStudio" width="900"}

![](https://quarto.org/docs/tools/images/jupyterlab-preview.png){.fragment fig-alt="A screenshot of a Quarto document rendered inside JupyterLab" width="900"}

![](https://quarto.org/docs/computations/images/python-vscode.png){.fragment fig-alt="A screenshot of a Quarto document rendered inside VSCode" width="900"}

:::

## Quarto VS Code extension

::: incremental

-   Integrated render and preview for Quarto documents.
-   Syntax highlighting for markdown and embedded languages
-   Completion and diagnostics for YAML options
-   Completion for embedded languages (e.g. Python, R, Julia, etc.)
-   Commands and key-bindings for running cells and selected lines

:::

## Previewing and rendering

![](images/demo-quarto.png){fig-align="center"}

## Previewing and rendering

![](images/demo-quarto-left.png){fig-align="center"}

## Previewing and rendering

![](images/demo-quarto-right.png){fig-align="center"}

## Previewing

**in VS Code**

-   Option 1: In the Terminal via `quarto preview`

```{.bash filename="Terminal"}
quarto preview my-document.qmd
```

. . .

-   Option 2: Using the Quarto Extension and clicking on Preview

. . .

-   Option 3: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + K



## Rendering

**in VS Code**

-   Option 1: In the Terminal via `quarto render`

```{.bash filename="Terminal"}
quarto render
```

. . .

-   Option 2: Use the Command Palette: **Quarto: Render Project**

## Your turn {.smaller}

::: task
**1. Software:** Download and install Python and the latest version of Quarto:

-   Python 3: <https://www.python.org/downloads/>
-   Quarto 1.5.57: <https://quarto.org/docs/get-started/>

**2. Tools:** Dowload and install VS Code and Jupyter and the Quarto extensions:

- VS Code: <https://code.visualstudio.com/>
- Quarto Extension: <https://marketplace.visualstudio.com/items?itemName=quarto.quarto>
- Jupyter Extension: <https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter>

:::

## Your turn {.smaller}

::: task

**3. Exercises:** Go to [`pos.it/smalldatasf-quarto-exercises`](https://pos.it/smalldatasf-quarto-exercises), click on *Use this template* then *Create a new repository*. Check *Include all branches*. Choose your personal GitHub repo as the Owner and give the repository a name.

**4. Packages:**  Open *VS Code*. Under *Start*, click on *Clone Git Repository*, and paste the URL of your exercise repo. 

  * Open the cloned project. In the Command Palette, go to `Python: Create Environment...` and choose `Venv`, then choose the (latest) Python version you have installed. 
  * Check the box for `requirements.txt` in the *Select dependencies to install* menu and hit *OK*.

See full instructions under **Setup**: [pos.it/smalldatasf-quarto-workshop](https://pos.it/smalldatasf-quarto-workshop)

**Then:** In VS Code, open the `olympicdash-0.ipynb` file. 

-   Convert the file to `.qmd` using `quarto convert`.

-   Preview the `.qmd` file.

:::


# Quarto documents

## Anatomy of a Quarto document

Three components:

1.  Metadata: YAML

2.  Text: Markdown

3.  Code: Executed via `jupyter` or `knitr`

. . .

**Weave it all together**, and you have beautiful, powerful, and useful outputs!

## Anatomy of a Quarto document

**Metadata: YAML**

:::: columns
::: {.column .fragment}

````{.markdown filename="my-document.qmd"}
---
title: "Olympic Games"
format: html
---
````

:::

::: {.column .fragment}
* Yet another markup language”
* Metadata of your document
* Demarcated by three dashes (`---`) on either end
*  Uses key-value pairs in the format `key: value`
:::

::::

## Anatomy of a Quarto document

**Text: Markdown**

````{.markdown filename="my-document.qmd"}
---
title: "Olympic Games"
format: html
---

This dataset records Olympic athlete details.
````

. . .

* Markdown is a lightweight language for creating formatted text
* Quarto is based on Pandoc and uses its variation of markdown as its underlying document syntax

## Anatomy of a Quarto document

**Text: Markdown**

```{=html}
<div class="sourceCode">
<pre class="sourceCode markdown">
<code class="sourceCode markdown">
The `olympic.csv` dataset records [**Olympic**](https://en.wikipedia.org/wiki/Olympic_Games) athlete details.
</code>
</pre>
</div>
```

The `olympic.csv` dataset records [**Olympic**](https://en.wikipedia.org/wiki/Olympic_Games) athlete details.

## Anatomy of a Quarto document

**Text: Markdown**

+-----------------------------------+-------------------------------+
| Markdown syntax                   | Output                        |
+===================================+===============================+
|     *italics* and **bold**        | *italics* and **bold**        |
+-----------------------------------+-------------------------------+
|     superscript^2^ / subscript~2~ | superscript^2^ / subscript~2~ |
+-----------------------------------+-------------------------------+
|     ~~strikethrough~~             | ~~strikethrough~~             |
+-----------------------------------+-------------------------------+
|     `verbatim code`               | `verbatim code`               |
+-----------------------------------+-------------------------------+

## Anatomy of a Quarto document

**Code**

````{.markdown filename="my-document.qmd" code-line-numbers=|8-16}
---
title: "Olympic Games"
format: html
---

This dataset records Olympic athlete details.

```{{python}}
from plotnine import ggplot, aes, geom_bar

(
    ggplot(mpg, aes(x = "country", y = "medals"))
    + geom_bar()
)
```

````

## Anatomy of a Quarto document

**Code**

:::: columns
::: {.column}

````{.markdown filename="my-document.qmd" code-line-numbers=8-16}
---
title: "Olympic Games"
format: html
---

This dataset records Olympic athlete details.

```{{python}}
from plotnine import ggplot, aes, geom_bar

(
    ggplot(mpg, aes(x = "country", y = "medals"))
    + geom_bar()
)
```

````

:::

::: {.column}
* Code chunks begin and end with three backticks (usually)
* Code chunks are identified with a programming language in between `{}`
:::

::::

## Anatomy of a Quarto document

**Inline code** executes code *within Markdown*

````{.markdown filename="my-document.qmd"}
```{{python}}
medals = 5
```

The number of medals is `{python} medals`.
````

Results in:

The number of medals is 5.

## Anatomy of a Quarto document

**Code** can include optional chunk options, in YAML style, identified by `#|` at the beginning of the line

````{.markdown code-line-numbers=|9}
---
title: "Olympic Games"
format: html
---

This dataset records Olympic athlete details.

```{{python}}
#| include: false
from plotnine import ggplot, aes, geom_bar

(
    ggplot(mpg, aes(x = "country", y = "medals"))
    + geom_bar()
)
```

````

## Anatomy of a Quarto document

**Code** can include optional chunk options, in YAML style, identified by `#|` at the beginning of the line

````{.markdown code-line-numbers=9-10}
---
title: "Olympic Games"
format: html
---

This dataset records Olympic athlete details.

```{{python}}
#| include: false
#| fig.alt: "A scatterplot with country on the x-axis and medals on the y-axis."
from plotnine import ggplot, aes, geom_bar

(
    ggplot(mpg, aes(x = "country", y = "medals"))
    + geom_bar()
)
```

````

## Anatomy of a Quarto document

**Code** can include optional chunk options, in YAML style, identified by `#|` at the beginning of the line

+--------------+------------------------------------------------+
| Option       | Description                                    |
+==============+================================================+
| `eval`       | Evaluate the code chunk                        |
+--------------+------------------------------------------------+
| `echo`       | Include the source code                        |
+--------------+------------------------------------------------+
| `warning`    | Include warnings                               |
+--------------+------------------------------------------------+
| `include`    | Include code and results                       |
+--------------+------------------------------------------------+

Other options: <https://quarto.org/docs/computations/execution-options.html>


## Your turn {.smaller}

In VS Code, open the `olympicdash-0.qmd` file. 

::: task
-   In the YAML, add an `author` field and add your name.

-   Add some Markdown text to the document.

-   For one of the tables, add the chunk option `echo: false`.

-   Add this to the top of the plotnine chart to set the order of `medal` variable.

```python
olympics['medal'] = pd.Categorical(
    olympics['medal'], 
    categories=["Gold", "Silver", "Bronze"], 
    ordered=True
)
```
:::

Save in between each step and see how the preview changes.

```{r}
countdown(minutes = 10)
```

# Authoring Quarto

## Images and links

+------------------------------------+---------------------------------+
| Markdown syntax                    | Output                          |
+====================================+=================================+
|     <https://quarto.org>           | <https://quarto.org>            |
+------------------------------------+---------------------------------+
|     [Quarto](https://quarto.org)   | [Quarto](https://quarto.org)    |
+------------------------------------+---------------------------------+
|     ![](penguin.jpg)               | ![](penguin.jpg)                |
+------------------------------------+---------------------------------+

## Tables

### Tables

``` {{markdown}}
| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|    12 | 12   | 12      |   12   |
|   123 | 123  | 123     |  123   |
|     1 | 1    | 1       |   1    |
```

| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|    12 | 12   | 12      |   12   |
|   123 | 123  | 123     |  123   |
|     1 | 1    | 1       |   1    |

## Divs and Spans

You can add classes, attributes, and other identifiers to content using Divs and Spans.

**Divs**

    ::: {.border}
    This content can be styled with a border
    :::

**Spans**

    [This is *some text*]{.class key="val"}

## Divs

**Callout blocks**

```{.markdown filename="my-document.qmd"}
:::{.callout-tip}

Note that there are five types of callouts, including: 
`note`, `tip`, `warning`, `caution`, and `important`.

:::
```

. . .

::: callout-tip
Note that there are five types of callouts, including: `note`, `tip`, `warning`, `caution`, and `important`.
:::

## Divs

**Multiple columns**

```{.markdown filename="my-document.qmd"}
::: {layout-ncol=2}

![](penguin.jpg)

Photo by <a href="https://unsplash.com/@corneliusventures?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Cornelius Ventures</a> on <a href="https://unsplash.com/s/photos/penguin?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
:::
```

. . .

::: {layout-ncol="2"}
![](penguin.jpg)

Photo by <a href="https://unsplash.com/@corneliusventures?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Cornelius Ventures</a> on <a href="https://unsplash.com/s/photos/penguin?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
:::


## Divs

**Tabsets**

```{.markdown filename="my-document.qmd"}
::: {.panel-tabset group="language"}
## R

`library(dplyr)`

## Python

`import pandas as pd`
:::
```

::: {.panel-tabset group="language"}
## R

`library(dplyr)`

## Python

`import pandas as pd`
:::

## Spans

```{.markdown filename="my-document.qmd"}
This is text that is [red]{style="color:red;"}.
```

. . .

This is text that is [red]{style="color:red;"}.

```{.markdown filename="my-document.qmd"}
![](penguin.jpg){fig-alt="A photo of a penguin jumping"}
```

![](penguin.jpg){fig-alt="A photo of a penguin jumping"}

## Theming

:::: columns
::: {.column}

````{.markdown code-line-numbers=4 filename="my-document.qmd"}
---
title: "Olympic Games"
format: html
theme: sketchy
---
````
:::

::: {.column .fragment}
![](images/sketchy.png)
:::
::::

## Your turn {.smaller}

-   Change the html theme to `sketchy`. (See <https://quarto.org/docs/output-formats/html-themes.html> for documentation on HTML theming.)

-   Edit the Markdown text you wrote in the previous exercise so that one of the words is blue.

-   Add a code chunk cell with the option `include: false`. Use the dataset to find the most gold medals by team.

-   Use inline code to write a sentence such as: "The most gold medals won by a single team are [count]."

-   Add a Div of your choice.

```{r}
countdown(minutes = 10)
```

# Changing formats

## Changing formats

:::: columns
::: {.column}

````{.markdown code-line-numbers=3 filename="my-document.qmd"}
---
title: "Olympic Games"
format: revealjs
---
````
:::

::: {.column .fragment}
![](images/revealjs.png)
:::
::::

## Changing formats

:::: columns
::: {.column}

````{.markdown code-line-numbers=3 filename="my-document.qmd"}
---
title: "Olympic Games"
format: pdf
---
````
:::

::: {.column .fragment}
![](images/pdf.png)
:::
::::

## Changing formats

:::: columns
::: {.column}

````{.markdown code-line-numbers=3 filename="my-document.qmd"}
---
title: "Olympic Games"
format: dashboard
theme: sketchy
---
````
:::

::: {.column .fragment}
![](images/dashboard.png)
:::
::::

# Documents to projects

## Anatomy of a Quarto project

::: r-fit-text
> [A Quarto Project is a directory]{.fragment} [that contains a file called `_quarto.yml`.]{.fragment}
:::

\

::: columns
::: {.column .fragment .fade-right width="50%"}
This is a Quarto Project.

```         
my-folder/
├── _quarto.yml
├── my-document.ipynb
```
:::

::: {.column .fragment .fade-left width="50%"}
This is not.

```         
my-folder/
├── my-document.ipynb
```
:::
:::

## \_quarto.yml {auto-animate="true"}

A YAML file with particular keys and values that Quarto recognizes. Unrecognized keys are ignored.

``` {.yaml .fragment filename="_quarto.yml"}
project:
  title: "Olympic Games"
```

## \_quarto.yml {auto-animate="true"}

A YAML file with particular keys and values that Quarto recognizes. Unrecognized keys are ignored.

``` {.yaml filename="_quarto.yml"}
project:
  type: website
  output-dir: docs
  resources:
    - images/python-logo.png

website:
  page-navigation: true
  title: "From Notebooks to Dashboards with Quarto"
  description: "Small Data SF - From Notebooks to Dashboards with Quarto Workshop"

  repo-url: https://github.com/posit-dev/small-data-sf-quarto-workshop
  repo-actions: [edit, issue]

  open-graph: true

  sidebar:
    background: "#FF6349"
    logo: "images/logo.png"
    pinned: true
    align: center
    tools:
      - icon: github
        href: https://github.com/posit-dev/small-data-sf-quarto-workshop
        text: "GitHub"
      - icon: code-square
        href: https://posit.cloud
        text: "Posit Cloud"

    style: docked
    search: true
    collapse-level: 2
    contents:
      - href: index.qmd
        text: Home
      - href: setup.qmd
        text: Setup
      - section: "Modules"
        contents:
          - href: 0-intro-to-quarto/index.qmd
          - href: 1-hello-dashboards/index.qmd
          - href: 2-components-theming/index.qmd
          - href: 3-deployment/index.qmd


  page-footer:
    right: "This page is built with 🩷 and [Quarto](https://quarto.org/)."
    left: "&copy; Copyright 2024"
    background: "#FF6A8A"

format:
  html:
    theme:
      light: [cosmo, style/light.scss]
      dark: [cosmo, style/light.scss, style/dark.scss]
    linkcolor: "#FF75EF"
    toc: true
    code-copy: true
    code-overflow: wrap
    mainfont: "Space Grotesk"
  
execute:
  freeze: auto
  echo: true

editor: source
```

## Quarto projects

-   Quarto projects have a `_quarto.yml` file

-   The `type` field in this file indicates the type of project:

    -   `default`: Collection of documents

    -   `website`: Websites (and blogs)

    -   `book`: Books

    -   `manuscript`: Manuscripts (Quarto 1.4+)

    -   `dashboard`: Dashboards (Quarto 1.4+)

# Wrap up

## A tour of Quarto

::: demo
-   Understanding the relationship between Quarto and the Jupyter engine
-   Using Quarto in VS Code
-   Creating Quarto documents (metadata, markdown text, and code)
-   Working with Quarto projects
:::


##  {menu="thank you" background-image="images/thank-you.png"}

::: huge-hand
thank you!
:::

::: large
any questions?
:::