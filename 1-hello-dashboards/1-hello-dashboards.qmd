---
title: "Hello, dashboards!"
subtitle: "Small Data SF"
author:   
  - name: Sara Altman
    affiliations:
      - name: Posit, PBC
  - name: Isabella Vel√°squez
    affiliations:
      - name: Posit, PBC
date: "2024-09-23"
footer: "[pos.it/smalldatasf-quarto-workshop](https://pos.it/smalldatasf-quarto-workshop)"
logo: "../images/slides-logo.png"
format:
  revealjs:
    theme: ../style/slides.scss
    transition: fade
    slide-number: true
    chalkboard: true
---

# Hello, Dashboards!

## Quarto ‚ûù many outputs {background-image="images/quarto-to-docs.png"}

With Quarto you can weave together narrative text and code to produce elegantly formatted output as documents, web pages, blog posts, books, and more...

## Quarto ‚ûù dashboards {background-image="images/quarto-to-dashboard.png"}

Since Quarto 1.4!

## Quarto version

::: callout-tip
Run the following in your Terminal to find your Quarto version:

``` {.bash filename="Terminal"}
quarto --version
```
:::

##  {.no-line background-image="images/dashboards/customer-churn.png" background-size="contain"}

::: {.notes}
rows and columns
value boxes
multiple pages
:::

##  {.no-line background-image="images/dashboards/dashing-through-snow.png" background-size="contain"}

::: {.notes}
sidebar
:::

##  {.no-line background-image="images/dashboards/earthquakes.png" background-size="contain"}

::: {.notes}
interactive leaflet widget
html widget
:::

##  {.no-line background-image="images/dashboards/gapminder.png" background-size="contain"}

::: {.notes}
interactive plotly code
:::

##  {.no-line background-image="images/dashboards/model-card.png" background-size="contain"}

::: {.notes}
dashboard for a model
provides context into the model by adding narrative to the dashboard
not just raw json dump
:::

##  {.no-line background-image="images/dashboards/mynorfolk.png" background-size="contain"}

::: {.notes}
tabset
:::

##  {.no-line background-image="images/dashboards/shiny-penguins.png" background-size="contain"}

::: {.notes}
uses shiny for python
select island and penguins and distributions will change
can see all these dashboards and their code on the quarto website under gallery
:::

##  {.no-line background-image="images/dashboards/stock-explorer.png" background-size="contain"}

## üç∞ Olympic Games dashboard

::: python-box
üîó [https://saraaltman.quarto.pub/olympic-games/](https://saraaltman.quarto.pub/olympic-games/)
:::

```{=html}
<iframe src="https://saraaltman.quarto.pub/olympic-games/" title = "Olympic Games dashboard" frameborder="1" height="575" width="1200"></iframe>
```

::: {.notes}
Walk through
Click link to interact with the dashboard yourself
:::

## Notebook ‚ûù Dashboard

::: python-box
``` {.markdown filename="olympicdash.qmd" style="overflow-y: hidden" code-line-numbers="|3"}
---
title: "Olympic Games"
format: dashboard
---

# notebook content goes here...
```
:::

::: {.notes}
How did we create this dashboard? 
One change to notebook
format

Once you done that
Many components you can add
all components offered in ipynb or plain text qmd
:::

# Dashboard basics

## Cards {auto-animate="true" auto-animate-easing="ease-in-out"}

Dashboards are composed of **cards**.

::: {.notes}
cards are the basic building blocks of dashboards
you often won't need to manually define a card -- they will typically map to cells in your notebook that create plots, display data, display text, etc.
:::


::: r-hstack
::: {data-id="box1" auto-animate-delay="0" style="background: #FF6349; width: 200px; height: 150px; margin: 10px; border: 3px solid #000;"}
:::

::: {data-id="box2" auto-animate-delay="0.1" style="background: #FF6C9F; width: 200px; height: 150px; margin: 10px; border: 3px solid #000;"}
:::

::: {data-id="box3" auto-animate-delay="0.2" style="background: #FF75EF; width: 200px; height: 150px; margin: 10px; border: 3px solid #000;"}
:::
:::

## Rows and columns {auto-animate="true" auto-animate-easing="ease-in-out"}

Cards are arranged into **rows** and **columns**.

::: r-stack
::: {data-id="box1" auto-animate-delay="0" style="background: #FF6349; width: 235px; height: 145px; margin-top: 30px; position: absolute; left: 275px; border: 3px solid #000;"}
:::

::: {data-id="box2" style="background: #FF6C9F; width: 235px; height: 145px; margin-top: 30px; position: absolute; right: 275px; border: 3px solid #000;"}
:::

::: {data-id="box3" style="background: #FF75EF; width: 500px; height: 300px; margin-top: 200px; border: 3px solid #000;"}
:::
:::

::: {.notes}
to organize content 
arrange into rows and columns
:::

## Layouts {auto-animate="true" auto-animate-easing="ease-in-out"}

**Pages**, **tabsets**, and **sidebars** allow for more advanced layouts.

::: r-stack
::: {data-id="box1" auto-animate-delay="0" style="background: #FF6349; width: 235px; height: 145px; margin-top: 30px; position: absolute; left: 275px; border: 3px solid #000;"}
:::

::: {data-id="box2" style="background: #FF6C9F; width: 235px; height: 145px; margin-top: 30px; position: absolute; right: 275px; border: 3px solid #000;"}
:::

::: {data-id="box3" style="background: #FF75EF; width: 500px; height: 300px; margin-top: 200px; border: 3px solid #000;"}
:::

::: {data-id="box4" auto-animate-delay="0" style="background: #D95127; width: 150px; height: 470px; margin-top: 30px; position: absolute; right: 800px; border: 3px solid #000;"}
:::
:::

::: {.notes}
can also control the general layout of the page with things like pages, tabsets, and sidebars
talk about this in the next slide deck
:::

## Step-by-step

Let's make a dashboard, step-by-step

# First dashboard

## Step 1: `format: dashboard` {auto-animate="true"}

::: python-box
``` {.yaml filename="dashboard.qmd"}
---
title: "My first Quarto dashboard"
format: dashboard
---
```
:::

::: {.notes}
first, need to add that format: dashboard line
:::

## Step 2: Add a card {auto-animate="true"}

::: python-box
```` {.yaml filename="dashboard.qmd" code-line-numbers="|10-16"}
---
title: "My first Quarto dashboard"
format: dashboard
---

```{{python}}
from plotnine import ggplot, aes, geom_point
from plotnine.data import mpg
```

```{{python}}
(
    ggplot(mpg, aes(x = "cty", y = "hwy"))
    + geom_point()
)
```
````
:::

::: {.notes}
now, add a card creating a plot
this is plotnine code
see what it looks like
:::

## Step 2: Add a card {.smaller auto-animate="true"}

::: columns
::: {.column width="40%"}
::: python-box
```` {.yaml filename="dashboard.qmd"}
---
title: "My first Quarto dashboard"
format: dashboard
---

```{{python}}
from plotnine import ggplot, aes, geom_point
from plotnine.data import mpg
```

```{{python}}
(
    ggplot(mpg, aes(x = "cty", y = "hwy"))
    + geom_point()
)
```
````
:::
:::

::: {.column width="60%"}
![](images/first-dashboard-py-1.png)
:::
:::

## Step 3: Add another card {auto-animate="true"}

::: python-box
```` {.yaml filename="dashboard.qmd" code-line-numbers="|18-23"}
---
title: "My first Quarto dashboard"
format: dashboard
---

```{{python}}
from plotnine import ggplot, aes, geom_point, geom_bar
from plotnine.data import mpg
```

```{{python}}
(
    ggplot(mpg, aes(x = "cty", y = "hwy"))
    + geom_point()
)
```

```{{python}}
(
    ggplot(mpg, aes(x = "drv"))
    + geom_bar()
)
```
````
:::

## Step 3: Add another card {.smaller auto-animate="true"}

::: columns
::: {.column width="40%"}
::: python-box
```` {.yaml filename="dashboard.qmd"}
---
title: "My first Quarto dashboard"
format: dashboard
---

```{{python}}
from plotnine import ggplot, aes, geom_point, geom_bar
from plotnine.data import mpg
```

```{{python}}
(
    ggplot(mpg, aes(x = "cty", y = "hwy"))
    + geom_point()
)
```

```{{python}}
(
    ggplot(mpg, aes(x = "drv"))
    + geom_bar()
)
```
````
:::
:::

::: {.column width="60%"}
![](images/first-dashboard-py-2.png)
:::
:::

::: {.notes}
will appear below by default
:::

## Step 4: Add titles to cards {auto-animate="true"}

::: python-box
```` {.yaml filename="dashboard.qmd" code-line-numbers="|12,20"}
---
title: "My first Quarto dashboard"
format: dashboard
---

```{{python}}
from plotnine import ggplot, aes, geom_point, geom_bar
from plotnine.data import mpg
```

```{{python}}
#| title: Highway vs. city mileage
(
    ggplot(mpg, aes(x = "cty", y = "hwy"))
    + geom_point()
)
```

```{{python}}
#| title: Drive types
(
    ggplot(mpg, aes(x = "drv"))
    + geom_bar()
)
```
````
:::

## Step 4: Add titles to cards {.smaller auto-animate="true"}

::: {.notes}
add titles using the title option in the cell
:::

::: columns
::: {.column width="40%"}
::: python-box
```` {.yaml filename="dashboard.qmd"}
---
title: "My first Quarto dashboard"
format: dashboard
---

```{{python}}
from plotnine import ggplot, aes, geom_point, geom_bar
from plotnine.data import mpg
```

```{{python}}
#| title: Highway vs. city mileage
(
    ggplot(mpg, aes(x = "cty", y = "hwy"))
    + geom_point()
)
```

```{{python}}
#| title: Drive types
(
    ggplot(mpg, aes(x = "drv"))
    + geom_bar()
)
```
````
:::
:::

::: {.column width="60%"}
![](images/first-dashboard-py-3.png)
:::
:::

## Step 5: Add a logo {auto-animate="true"}

::: python-box
```` {.yaml filename="dashboard.qmd" code-line-numbers="|3-5"}
---
title: "My first Quarto dashboard"
format: 
  dashboard:
    logo: images/beetle.png
---

```{{python}}
from plotnine import ggplot, aes, geom_point, geom_bar
from plotnine.data import mpg
```

```{{python}}
#| title: Highway vs. city mileage
(
    ggplot(mpg, aes(x = "cty", y = "hwy"))
    + geom_point()
)
```

```{{python}}
#| title: Drive types
(
    ggplot(mpg, aes(x = "drv"))
    + geom_bar()
)
```
````
:::

## Step 5: Add a logo {.smaller auto-animate="true"}

::: {.notes}
add a logo
yaml header
:::

::: columns
::: {.column width="40%"}
::: python-box
```` {.yaml filename="dashboard.qmd"}
---
title: "My first Quarto dashboard"
format: 
  dashboard:
    logo: images/beetle.png
---

```{{python}}
from plotnine import ggplot, aes, geom_point, geom_bar
from plotnine.data import mpg
```

```{{python}}
#| title: Highway vs. city mileage
(
    ggplot(mpg, aes(x = "cty", y = "hwy"))
    + geom_point()
)
```

```{{python}}
#| title: Drive types
(
    ggplot(mpg, aes(x = "drv"))
    + geom_bar()
)
```
````
:::
:::

::: {.column width="60%"}
![](images/first-dashboard-py-4.png)
:::
:::

## Steps 1 - 5 {auto-animate="true"}

![](images/first-dashboard-py-4.png){fig-align="center"}

::: {.notes}
now have a dashboard
:::

# Layout

## Rows {auto-animate="true"}

By default, cards are laid out in rows:

::: {data-id="code"}
```` {.yaml filename="dashboard.qmd" code-line-numbers="|13,23"}
{{< include _rows.qmd >}}
````
:::

## Rows {.smaller auto-animate="true"}

::: columns
::: {.column width="40%"}
::: {data-id="code"}
```` {.yaml filename="dashboard.qmd" code-line-numbers="13,23"}
{{< include _rows.qmd >}}
````
:::
:::

::: {.column width="60%"}
![](images/rows.png)
:::
:::

## Rows {auto-animate="true"}

Default value of `orientation` is `rows`:

::: {data-id="code"}
```` {.yaml filename="dashboard.qmd" code-line-numbers="4-5"}
{{< include _rows-orientation.qmd >}}
````
:::

## Columns {auto-animate="true"}

Setting `orientation` to `columns` makes each `##` indicate a column instead of a row:

::: {data-id="code"}
```` {.yaml filename="dashboard.qmd" code-line-numbers="4-5"}
{{< include _columns.qmd >}}
````
:::

## Columns {.smaller auto-animate="true"}

::: columns
::: {.column width="40%"}
::: {data-id="code"}
```` {.yaml filename="dashboard.qmd" code-line-numbers="4-5,14,24"}
{{< include _columns.qmd >}}
````
:::
:::

::: {.column width="60%"}
![](images/columns.png)
:::
:::

## Rows, then columns {auto-animate="true"}

::: {data-id="code"}
```` {.yaml filename="dashboard.qmd" code-line-numbers="|13-23|25-45"}
{{< include _rows-then-columns.qmd >}}
````
:::

## Rows, then columns {.smaller auto-animate="true"}

::: columns
::: {.column width="40%"}
::: {data-id="code"}
```` {.yaml filename="dashboard.qmd" code-line-numbers="13,15,19,25,27,37"}
{{< include _rows-then-columns.qmd >}}
````
:::
:::

::: {.column width="60%"}
![](images/rows-then-columns.png)
:::
:::

## Columns, then rows {auto-animate="true"}

::: {data-id="code"}
```` {.yaml filename="dashboard.qmd" code-line-numbers="|5|13-23|26-46"}
{{< include _columns-then-rows.qmd >}}
````
:::

## Columns, then rows {.smaller auto-animate="true"}

::: columns
::: {.column width="40%"}
::: {data-id="code"}
```` {.yaml filename="dashboard.qmd" code-line-numbers="5"}
{{< include _columns-then-rows.qmd >}}
````
:::
:::

::: {.column width="60%"}
![](images/columns-then-rows.png)
:::
:::

# Your turn

## Start {.smaller}

::: python-box
In your cloned version of `posit-dev/smalldatasf-quarto-exercises` (<http://pos.it/smalldatasf-quarto-exercises>), open on `olympicdash-1.qmd.`
:::

## Goal

Your goal is to create the following dashboard.

::: python-box
![](images/olympicdash-1.png)
:::


## Step 1

::: your-turn
-   Turn the output to a dashboard.
-   Add `title`s to code cells.
-   Add the olympics logo from the `images` folder
:::

:::{.column width="80%"}
::: python-box
![](images/olympicdash-1.png)
:::
:::

{{< countdown minutes=5 >}}


## Step 2

::: your-turn
Using [https://quarto.org/docs/dashboards/](https://quarto.org/docs/dashboards/):

Reorganize the cards into rows and columns as shown below.
:::

:::{.column width="80%"}
::: python-box
![](images/olympicdash-3.png)
:::
:::

{{< countdown minutes=5 >}}
